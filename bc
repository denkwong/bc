#!/usr/bin/env python

# created by: Dennis Kwong
# cost: 2.00 cat food

from bc import Bc
from bc import InputError
import argparse
import json
import logging
from logging.handlers import RotatingFileHandler
import os

FORMS = ["Normal", "Evolved", "True"]
LOG_FILE = "bc.log"
SOURCE_FILE = "bc_source.json"
TARGET_FILE = "bc.json"

logger = logging.getLogger("bc")
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler = RotatingFileHandler(LOG_FILE, maxBytes=50000, backupCount=5)
handler.setFormatter(formatter)
logger.addHandler(handler)


def generate_bc_json():
    """
    generate the target json file
    :return: None
    """
    logger.info("Generating target {0}".format(TARGET_FILE))
    if os.path.getmtime(SOURCE_FILE) > os.path.getmtime(TARGET_FILE):
        logger.info("Reading source {0}".format(SOURCE_FILE))
        with open(SOURCE_FILE) as fh:
            bc_source = json.load(fh)

        all_cats = {
            "cats": list()
        }

        # create all_cats
        for rarity, cats in bc_source["cats"].items():
            cat_count = len(cats)
            logger.info("{0}: {1} cats".format(rarity, cat_count))
            for index, cat in enumerate(cats):
                c = convert_cat(cat, rarity, index+1, cat_count)
                all_cats["cats"].extend(c)

        # write all cats to file.
        with open(TARGET_FILE, "w") as fh:
            json.dump(all_cats, fh, indent=4, sort_keys=True)
        logger.info("Finished generating target {0}".format(TARGET_FILE))
    else:
        logger.info("Generation not needed, target {0} newer than source {1}.".format(TARGET_FILE, SOURCE_FILE))


def convert_cat(cat, rarity, cat_position, cat_count):
    """
    convert bc_source to list of cats
    :param dict cat: one cat in simple form
    :param str rarity: normal, special, rare, super, uber, legend
    :param int cat_position: index of cat position in rarity list
    :param int cat_count: total cats in rarity
    :return: a list of cat objects
    :rtype: list
    """
    output = list()
    for index, form in enumerate(FORMS):
        if cat["name"][index]:
            c = {
                "name": cat["name"][index],
                "cost": cat["cost"][index],
                "ability": [x.strip() for x in cat["ability"][index].split(",")],
                "effect": [x.strip() for x in cat["effect"][index].split(",")],
                "target": [x.strip() for x in cat["target"][index].split(",")],
                "description": cat["description"][index],
                "alias": [x for x in cat["name"] if x],
                "form": form,
                "rarity": rarity.title(),
                "rarity_index": cat_position,
                "rarity_pct": 1.0 * cat_position / cat_count,
                "rarity_total": cat_count
            }
            if c["name"] in c["alias"]:
                c["alias"].remove(c["name"])
            if c["effect"][0] != "" and c["target"][0] == "":
                c["target"] = ["traitless"]
            if "talents" in cat and form == "True":
                c["talents"] = cat["talents"]
                c = add_talents(c)
            output.append(c)
    return output


def add_talents(cat):
    """ process talents for true forms. e.g. new targets are added to target.
    :param dict cat: a single cat
    :rtype: dict
    :return: a single cat with talents added
    """
    for k, v in cat["talents"].items():
        # abilities
        if k in [
            "Attack Buff",
            "Barrier Breaker",
            "Curse Immunity",
            "Defense Buff",
            "Dodge Attack",
            "Freeze",
            "Immune to Waves",
            "Knockback",
            "Move Speed Up",
            "Slow",
            "Warp Blocker",
            "Wave Attack",
            "Weaken",
            "Zombie Killer"
        ] and v != 0:
            cat["ability"].append(k)
        # strengthen ability
        elif k == "Attack Up" and v != 0:
            cat["ability"].append("Strengthen")
        # extra money ability
        elif k == "Money Up" and v != 0:
            cat["ability"].append("Extra Money")
        # survive ability
        elif k == "Survives" and v != 0:
            cat["ability"].append("Survive")
        # resist ability
        elif "Resist" in k and v != 0:
            cat["ability"].append(k)
        # targets
        elif "Target" in k and v != 0:
            cat["target"].append(k.replace("Target ", ""))
    return cat


def display_cat(cat, **kwargs):
    """
    display basic cat info and requested search criteria
    :param Bc.Cat cat: cat object
    :return: None
    """
    name = cat.get_name()
    aliases = cat.get_alias()
    aliases = ", ".join(aliases)
    display_str = "{0} ({1}), {2}, {3}% ({4}/{5})".format(
        name,
        aliases,
        cat.get_rarity(),
        int(cat.get_rarity_pct()*100),
        cat.get_rarity_index(),
        cat.get_rarity_total())
    if "cost" in kwargs and kwargs["cost"]:
        display_str += ", c[{0}]".format(cat.get_cost())
    if "form" in kwargs and kwargs["form"]:
        display_str += ", f[{0}]".format(cat.get_form(kwargs["form"]))
    if "ability" in kwargs and kwargs["ability"]:
        display_str += ", a[{0}]".format(", ".join(cat.get_ability(kwargs["ability"])))
    if "target" in kwargs and kwargs["target"]:
        display_str += ", t[{0}]".format(", ".join(cat.get_target(kwargs["target"])))
    if "effect" in kwargs and kwargs["effect"]:
        display_str += ", e[{0}]".format(", ".join(cat.get_effect(kwargs["effect"])))
    if "ability_effect" in kwargs and kwargs["ability_effect"]:
        display_str += ", b[{0}]".format(", ".join(cat.get_ability_effect(kwargs["ability_effect"])))
    if "description" in kwargs and kwargs["description"]:
        display_str += ", d[{0}]".format(cat.get_description())
    print(display_str)


def display_stats(stats_obj):
    """
    Display the stats for all the cats.
    :param dict stats_obj: Nested dict of Cats stats.
    :return: None
    """
    for categories in stats_obj.keys():
        print(categories)
        for k, v in stats_obj[categories].items():
            print("  {0}: {1}".format(k, v))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Battle Cats, search for cats by attributes.")
    parser.add_argument("--ability", "-a", help="Search by ability")
    parser.add_argument("--ability-effect", "-b", help="Search both ability and effect")
    parser.add_argument("--cost", "-c", help="Search by cost")
    parser.add_argument("--description", "-d", help="Search by description")
    parser.add_argument("--effect", "-e", help="Search by effect")
    parser.add_argument("--form", "-f", help="Search by form")
    parser.add_argument("--list", "-l", action="store_true", help="List all cats all forms with rarity")
    parser.add_argument("--name", "-n", help="Search by name")
    parser.add_argument("--rarity", "-r", help="Search by rarity")
    parser.add_argument("--stats", "-s", action="store_true", help="Display stats")
    parser.add_argument("--target", "-t", help="Search by target")
    args = parser.parse_args()
    logger.info("==========")
    logger.info("parser args = {0}".format(vars(args)))
    generate_bc_json()

    cats = None
    bc = Bc(TARGET_FILE)

    try:
        if args.name:
            cats = bc.find_cat(args.name)
            logger.debug("Cat count after name = {0}".format(len(cats)))
        if args.rarity:
            cats = bc.find_rarity(args.rarity, cats)
            logger.debug("Cat count after rarity = {0}".format(len(cats)))
        if args.cost:
            cats = bc.find_cost(args.cost, cats)
            logger.debug("Cat count after cost = {0}".format(len(cats)))
        if args.target:
            cats = bc.find_target(args.target, cats)
            logger.debug("Cat count after target = {0}".format(len(cats)))
        if args.ability:
            cats = bc.find_ability(args.ability, cats)
            logger.debug("Cat count after ability = {0}".format(len(cats)))
        if args.effect:
            cats = bc.find_effect(args.effect, cats)
            logger.debug("Cat count after effect = {0}".format(len(cats)))
        if args.ability_effect:
            cats = bc.find_ability_effect(args.ability_effect, cats)
            logger.debug("Cat count after ability_effect = {0}".format(len(cats)))
        if args.description:
            cats = bc.find_description(args.description, cats)
            logger.debug("Cat count after description = {0}".format(len(cats)))
        if args.form:
            cats = bc.find_form(args.form, cats)
            logger.debug("Cat count after form = {0}".format(len(cats)))
        if args.list:
            bc.list_cats()
        if args.stats:
            display_stats(bc.stats())
    except InputError:
        exit(1)

    if cats is None:
        cats = []

    for cat in cats:
        display_cat(cat, **vars(args))
    message = "{0} cats found".format(len(cats))
    logger.info(message)
    print(message)
